# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
time = 0
paddle1_pos = HEIGHT / 2 -HALF_PAD_HEIGHT
paddle2_pos = HEIGHT / 2 -HALF_PAD_HEIGHT
paddle1_vel, paddle2_vel = 0, 0
score1, score2 = 0, 0
ball_line_width = 2
# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [1,1]
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    if direction == RIGHT:
        ball_vel[0] = random.randrange(1,3)
        ball_vel[1] = random.randrange(2,4)
    elif direction ==LEFT:
        ball_vel[0] = random.randrange(-3,-1)
        ball_vel[1] = random.randrange(-4,-2)

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel,ball_pos,paddle1_pos,paddle2_pos # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_pos = HEIGHT / 2 -HALF_PAD_HEIGHT
    paddle2_pos = HEIGHT / 2 -HALF_PAD_HEIGHT
    ball_pos = [WIDTH/2,HEIGHT/2]
    spawn_ball(RIGHT)
# initialize ball_pos and ball_vel for new bal in middle of table

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]

    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White")
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos+ paddle1_vel <= HEIGHT-PAD_HEIGHT and  paddle1_pos+ paddle1_vel >= 0 :
       paddle1_pos += paddle1_vel     
    if paddle2_pos+ paddle2_vel <= HEIGHT-PAD_HEIGHT and  paddle2_pos+ paddle2_vel >= 0:
       paddle2_pos += paddle2_vel

    # draw paddles
    canvas.draw_line([0,paddle1_pos],[PAD_WIDTH,paddle1_pos],2,'White')
    canvas.draw_line([0,paddle1_pos+PAD_HEIGHT],[PAD_WIDTH,paddle1_pos+PAD_HEIGHT],2,'White')
    canvas.draw_line([WIDTH-PAD_WIDTH,int(paddle2_pos)],[WIDTH,paddle2_pos],2,'White')
    canvas.draw_line([WIDTH-PAD_WIDTH,int(paddle2_pos)+PAD_HEIGHT],[WIDTH,paddle2_pos+PAD_HEIGHT],2,'White')
    # determine whether paddle and ball collide 
    if ball_pos[1] <= BALL_RADIUS or\
       ball_pos[1] >= HEIGHT-BALL_RADIUS:
        ball_vel[1]=-ball_vel[1]
    if (ball_pos[0] + BALL_RADIUS + ball_line_width >= WIDTH - PAD_WIDTH):
        # hit the paddle2
        if ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT and \
        ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT:
        
            ball_vel[0] = - 1.1 * ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score1 += 1
            spawn_ball(LEFT)
    if (ball_pos[0] - BALL_RADIUS - ball_line_width <= PAD_WIDTH):
        # hit the paddle1
        if ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT and \
        ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT and\
        ball_pos[1] >= BALL_RADIUS and\
        ball_pos[1] <= HEIGHT-BALL_RADIUS:
            ball_vel[0] = - 1.1 * ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score2 += 1
            spawn_ball(RIGHT)
            
             

   
    # draw scores

    canvas.draw_text(str(score1), (100, 100), 50, 'White')   
    canvas.draw_text(str(score2), (450, 100), 50, 'White')   
def keydown(key):
    global paddle1_vel, paddle2_vel
    vel=4
    # palyer 1
    if key == simplegui.KEY_MAP["w"]:            
        paddle1_vel -= vel
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel += vel
    if key == simplegui.KEY_MAP["w"] and key == simplegui.KEY_MAP["s"]:
        pass
    
    # player 2
    if key == simplegui.KEY_MAP["up"]:            
        paddle2_vel -= vel
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel += vel
    if key == simplegui.KEY_MAP["down"] and key == simplegui.KEY_MAP["up"]:
        pass

def keyup(key):
    global paddle1_vel, paddle2_vel
    # palyer 1
    if key == simplegui.KEY_MAP["w"]:            
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["w"] and key == simplegui.KEY_MAP["s"]:
        pass
    
    # player 2
    if key == simplegui.KEY_MAP["up"]:            
        paddle2_vel = 0
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP["down"] and key == simplegui.KEY_MAP["up"]:
        pass
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset",new_game,100)


# start frame
new_game()
frame.start()
